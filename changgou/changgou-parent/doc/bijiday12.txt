+ 畅购的支付系统的开发思路

+ 生成二维码

+ 检测支付的状态

+ 通过mq实现发送消息和监听消息 实现 订单的状态的休息





+ 生成支付二维码
	+ 发送请求
	+ 后台接收
	+ 使用httpclient SDK 调用统一下单的API 
	+ 收到微信返回的URL 
	+ 返回给前端

	请求:  /create/native
	参数:  前端接收到订单微服务生成的订单号和金额跳转到支付页面,数据(金额 和订单号)传递给支付微服务
	返回值:result<Map>   要有code_url 
	controller service httpclient--->微信支付系统
	
+ 前端页面检测订单的支付状态

	+ js 隔3秒钟发送请求
	+ 支付微服务后台接收请求
	+ 获取里面的参数 (订单的ID)
	+ 调用微信的查询订单的API 查询该订单的支付的状态
	+ 返回状态的数据

	请求:  /status/query
	参数:  out_trade_no
	返回值:	result<map> map里面有支付的状态:

	controller servcie httpclient---


+ 通知开发
	+ 编写一个url notify_url指定的的url
	+ 接收微信支付系统根据该指定的url发送过来的数据流信息
	+ 解析数据 判断 是否支付成功
	+ 返回给微信支付系统的响应(xml )


+ rabbitmq 发消息  接收消息

	+ 发送方 支付微服务 (集成rabbitmq)
		+ 加入依赖
		+ 创建队列 创建交换机 创建routingkey
		+ 接收到通知之后,发送消息

	+ 消费方 订单微服务 (集成rabbitmq)
		+ 加入依赖
		+ 创建监听类(注解:监听某一个队列的消息)
		+ 监听到消息之后
			+ 修改状态



